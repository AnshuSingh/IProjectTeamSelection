/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.CreateTeams.slayer.model.impl;

import com.CreateTeams.slayer.model.CTS;
import com.CreateTeams.slayer.model.CTSModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the CTS service. Represents a row in the &quot;CTS_CTS&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.CreateTeams.slayer.model.CTSModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CTSImpl}.
 * </p>
 *
 * @author zhengyan
 * @see CTSImpl
 * @see com.CreateTeams.slayer.model.CTS
 * @see com.CreateTeams.slayer.model.CTSModel
 * @generated
 */
public class CTSModelImpl extends BaseModelImpl<CTS> implements CTSModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a c t s model instance should use the {@link com.CreateTeams.slayer.model.CTS} interface instead.
	 */
	public static final String TABLE_NAME = "CTS_CTS";
	public static final Object[][] TABLE_COLUMNS = {
			{ "TeamId", Types.BIGINT },
			{ "TeamName", Types.VARCHAR },
			{ "TeamMembers", Types.VARCHAR },
			{ "dateAdded", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table CTS_CTS (TeamId LONG not null primary key,TeamName VARCHAR(75) null,TeamMembers VARCHAR(75) null,dateAdded DATE null)";
	public static final String TABLE_SQL_DROP = "drop table CTS_CTS";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.CreateTeams.slayer.model.CTS"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.CreateTeams.slayer.model.CTS"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.CreateTeams.slayer.model.CTS"));

	public CTSModelImpl() {
	}

	public long getPrimaryKey() {
		return _TeamId;
	}

	public void setPrimaryKey(long primaryKey) {
		setTeamId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_TeamId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return CTS.class;
	}

	public String getModelClassName() {
		return CTS.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("TeamId", getTeamId());
		attributes.put("TeamName", getTeamName());
		attributes.put("TeamMembers", getTeamMembers());
		attributes.put("dateAdded", getDateAdded());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long TeamId = (Long)attributes.get("TeamId");

		if (TeamId != null) {
			setTeamId(TeamId);
		}

		String TeamName = (String)attributes.get("TeamName");

		if (TeamName != null) {
			setTeamName(TeamName);
		}

		String TeamMembers = (String)attributes.get("TeamMembers");

		if (TeamMembers != null) {
			setTeamMembers(TeamMembers);
		}

		Date dateAdded = (Date)attributes.get("dateAdded");

		if (dateAdded != null) {
			setDateAdded(dateAdded);
		}
	}

	public long getTeamId() {
		return _TeamId;
	}

	public void setTeamId(long TeamId) {
		_TeamId = TeamId;
	}

	public String getTeamName() {
		if (_TeamName == null) {
			return StringPool.BLANK;
		}
		else {
			return _TeamName;
		}
	}

	public void setTeamName(String TeamName) {
		_TeamName = TeamName;
	}

	public String getTeamMembers() {
		if (_TeamMembers == null) {
			return StringPool.BLANK;
		}
		else {
			return _TeamMembers;
		}
	}

	public void setTeamMembers(String TeamMembers) {
		_TeamMembers = TeamMembers;
	}

	public Date getDateAdded() {
		return _dateAdded;
	}

	public void setDateAdded(Date dateAdded) {
		_dateAdded = dateAdded;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			CTS.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CTS toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (CTS)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		CTSImpl ctsImpl = new CTSImpl();

		ctsImpl.setTeamId(getTeamId());
		ctsImpl.setTeamName(getTeamName());
		ctsImpl.setTeamMembers(getTeamMembers());
		ctsImpl.setDateAdded(getDateAdded());

		ctsImpl.resetOriginalValues();

		return ctsImpl;
	}

	public int compareTo(CTS cts) {
		long primaryKey = cts.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		CTS cts = null;

		try {
			cts = (CTS)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = cts.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<CTS> toCacheModel() {
		CTSCacheModel ctsCacheModel = new CTSCacheModel();

		ctsCacheModel.TeamId = getTeamId();

		ctsCacheModel.TeamName = getTeamName();

		String TeamName = ctsCacheModel.TeamName;

		if ((TeamName != null) && (TeamName.length() == 0)) {
			ctsCacheModel.TeamName = null;
		}

		ctsCacheModel.TeamMembers = getTeamMembers();

		String TeamMembers = ctsCacheModel.TeamMembers;

		if ((TeamMembers != null) && (TeamMembers.length() == 0)) {
			ctsCacheModel.TeamMembers = null;
		}

		Date dateAdded = getDateAdded();

		if (dateAdded != null) {
			ctsCacheModel.dateAdded = dateAdded.getTime();
		}
		else {
			ctsCacheModel.dateAdded = Long.MIN_VALUE;
		}

		return ctsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{TeamId=");
		sb.append(getTeamId());
		sb.append(", TeamName=");
		sb.append(getTeamName());
		sb.append(", TeamMembers=");
		sb.append(getTeamMembers());
		sb.append(", dateAdded=");
		sb.append(getDateAdded());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("com.CreateTeams.slayer.model.CTS");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>TeamId</column-name><column-value><![CDATA[");
		sb.append(getTeamId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>TeamName</column-name><column-value><![CDATA[");
		sb.append(getTeamName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>TeamMembers</column-name><column-value><![CDATA[");
		sb.append(getTeamMembers());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dateAdded</column-name><column-value><![CDATA[");
		sb.append(getDateAdded());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = CTS.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			CTS.class
		};
	private long _TeamId;
	private String _TeamName;
	private String _TeamMembers;
	private Date _dateAdded;
	private CTS _escapedModelProxy;
}