/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.subscriberapprove.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.subscriberapprove.model.useraccount;
import com.subscriberapprove.model.useraccountModel;
import com.subscriberapprove.model.useraccountSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the useraccount service. Represents a row in the &quot;cnua_useraccount&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.subscriberapprove.model.useraccountModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link useraccountImpl}.
 * </p>
 *
 * @author Shruthi
 * @see useraccountImpl
 * @see com.subscriberapprove.model.useraccount
 * @see com.subscriberapprove.model.useraccountModel
 * @generated
 */
@JSON(strict = true)
public class useraccountModelImpl extends BaseModelImpl<useraccount>
	implements useraccountModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a useraccount model instance should use the {@link com.subscriberapprove.model.useraccount} interface instead.
	 */
	public static final String TABLE_NAME = "cnua_useraccount";
	public static final Object[][] TABLE_COLUMNS = {
			{ "useraccountId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "firstName", Types.VARCHAR },
			{ "lastName", Types.VARCHAR },
			{ "eMail", Types.VARCHAR },
			{ "phoneNo", Types.VARCHAR },
			{ "major", Types.VARCHAR },
			{ "cgpa", Types.VARCHAR },
			{ "role", Types.VARCHAR },
			{ "password_", Types.VARCHAR },
			{ "asuriteId", Types.VARCHAR },
			{ "level", Types.VARCHAR },
			{ "sex", Types.VARCHAR },
			{ "dateAdded", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table cnua_useraccount (useraccountId LONG not null primary key IDENTITY,companyId LONG,firstName VARCHAR(75) null,lastName VARCHAR(75) null,eMail VARCHAR(75) null,phoneNo VARCHAR(75) null,major VARCHAR(75) null,cgpa VARCHAR(75) null,role VARCHAR(75) null,password_ VARCHAR(75) null,asuriteId VARCHAR(75) null,level VARCHAR(75) null,sex VARCHAR(75) null,dateAdded DATE null)";
	public static final String TABLE_SQL_DROP = "drop table cnua_useraccount";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.subscriberapprove.model.useraccount"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.subscriberapprove.model.useraccount"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static useraccount toModel(useraccountSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		useraccount model = new useraccountImpl();

		model.setUseraccountId(soapModel.getUseraccountId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setFirstName(soapModel.getFirstName());
		model.setLastName(soapModel.getLastName());
		model.setEMail(soapModel.getEMail());
		model.setPhoneNo(soapModel.getPhoneNo());
		model.setMajor(soapModel.getMajor());
		model.setCgpa(soapModel.getCgpa());
		model.setRole(soapModel.getRole());
		model.setPassword(soapModel.getPassword());
		model.setAsuriteId(soapModel.getAsuriteId());
		model.setLevel(soapModel.getLevel());
		model.setSex(soapModel.getSex());
		model.setDateAdded(soapModel.getDateAdded());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<useraccount> toModels(useraccountSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<useraccount> models = new ArrayList<useraccount>(soapModels.length);

		for (useraccountSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.subscriberapprove.model.useraccount"));

	public useraccountModelImpl() {
	}

	public long getPrimaryKey() {
		return _useraccountId;
	}

	public void setPrimaryKey(long primaryKey) {
		setUseraccountId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_useraccountId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return useraccount.class;
	}

	public String getModelClassName() {
		return useraccount.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("useraccountId", getUseraccountId());
		attributes.put("companyId", getCompanyId());
		attributes.put("firstName", getFirstName());
		attributes.put("lastName", getLastName());
		attributes.put("eMail", getEMail());
		attributes.put("phoneNo", getPhoneNo());
		attributes.put("major", getMajor());
		attributes.put("cgpa", getCgpa());
		attributes.put("role", getRole());
		attributes.put("password", getPassword());
		attributes.put("asuriteId", getAsuriteId());
		attributes.put("level", getLevel());
		attributes.put("sex", getSex());
		attributes.put("dateAdded", getDateAdded());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long useraccountId = (Long)attributes.get("useraccountId");

		if (useraccountId != null) {
			setUseraccountId(useraccountId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		String firstName = (String)attributes.get("firstName");

		if (firstName != null) {
			setFirstName(firstName);
		}

		String lastName = (String)attributes.get("lastName");

		if (lastName != null) {
			setLastName(lastName);
		}

		String eMail = (String)attributes.get("eMail");

		if (eMail != null) {
			setEMail(eMail);
		}

		String phoneNo = (String)attributes.get("phoneNo");

		if (phoneNo != null) {
			setPhoneNo(phoneNo);
		}

		String major = (String)attributes.get("major");

		if (major != null) {
			setMajor(major);
		}

		String cgpa = (String)attributes.get("cgpa");

		if (cgpa != null) {
			setCgpa(cgpa);
		}

		String role = (String)attributes.get("role");

		if (role != null) {
			setRole(role);
		}

		String password = (String)attributes.get("password");

		if (password != null) {
			setPassword(password);
		}

		String asuriteId = (String)attributes.get("asuriteId");

		if (asuriteId != null) {
			setAsuriteId(asuriteId);
		}

		String level = (String)attributes.get("level");

		if (level != null) {
			setLevel(level);
		}

		String sex = (String)attributes.get("sex");

		if (sex != null) {
			setSex(sex);
		}

		Date dateAdded = (Date)attributes.get("dateAdded");

		if (dateAdded != null) {
			setDateAdded(dateAdded);
		}
	}

	@JSON
	public long getUseraccountId() {
		return _useraccountId;
	}

	public void setUseraccountId(long useraccountId) {
		_useraccountId = useraccountId;
	}

	@JSON
	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	public String getFirstName() {
		if (_firstName == null) {
			return StringPool.BLANK;
		}
		else {
			return _firstName;
		}
	}

	public void setFirstName(String firstName) {
		_firstName = firstName;
	}

	@JSON
	public String getLastName() {
		if (_lastName == null) {
			return StringPool.BLANK;
		}
		else {
			return _lastName;
		}
	}

	public void setLastName(String lastName) {
		_lastName = lastName;
	}

	@JSON
	public String getEMail() {
		if (_eMail == null) {
			return StringPool.BLANK;
		}
		else {
			return _eMail;
		}
	}

	public void setEMail(String eMail) {
		_eMail = eMail;
	}

	@JSON
	public String getPhoneNo() {
		if (_phoneNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _phoneNo;
		}
	}

	public void setPhoneNo(String phoneNo) {
		_phoneNo = phoneNo;
	}

	@JSON
	public String getMajor() {
		if (_major == null) {
			return StringPool.BLANK;
		}
		else {
			return _major;
		}
	}

	public void setMajor(String major) {
		_major = major;
	}

	@JSON
	public String getCgpa() {
		if (_cgpa == null) {
			return StringPool.BLANK;
		}
		else {
			return _cgpa;
		}
	}

	public void setCgpa(String cgpa) {
		_cgpa = cgpa;
	}

	@JSON
	public String getRole() {
		if (_role == null) {
			return StringPool.BLANK;
		}
		else {
			return _role;
		}
	}

	public void setRole(String role) {
		_role = role;
	}

	@JSON
	public String getPassword() {
		if (_password == null) {
			return StringPool.BLANK;
		}
		else {
			return _password;
		}
	}

	public void setPassword(String password) {
		_password = password;
	}

	@JSON
	public String getAsuriteId() {
		if (_asuriteId == null) {
			return StringPool.BLANK;
		}
		else {
			return _asuriteId;
		}
	}

	public void setAsuriteId(String asuriteId) {
		_asuriteId = asuriteId;
	}

	@JSON
	public String getLevel() {
		if (_level == null) {
			return StringPool.BLANK;
		}
		else {
			return _level;
		}
	}

	public void setLevel(String level) {
		_level = level;
	}

	@JSON
	public String getSex() {
		if (_sex == null) {
			return StringPool.BLANK;
		}
		else {
			return _sex;
		}
	}

	public void setSex(String sex) {
		_sex = sex;
	}

	@JSON
	public Date getDateAdded() {
		return _dateAdded;
	}

	public void setDateAdded(Date dateAdded) {
		_dateAdded = dateAdded;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			useraccount.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public useraccount toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (useraccount)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		useraccountImpl useraccountImpl = new useraccountImpl();

		useraccountImpl.setUseraccountId(getUseraccountId());
		useraccountImpl.setCompanyId(getCompanyId());
		useraccountImpl.setFirstName(getFirstName());
		useraccountImpl.setLastName(getLastName());
		useraccountImpl.setEMail(getEMail());
		useraccountImpl.setPhoneNo(getPhoneNo());
		useraccountImpl.setMajor(getMajor());
		useraccountImpl.setCgpa(getCgpa());
		useraccountImpl.setRole(getRole());
		useraccountImpl.setPassword(getPassword());
		useraccountImpl.setAsuriteId(getAsuriteId());
		useraccountImpl.setLevel(getLevel());
		useraccountImpl.setSex(getSex());
		useraccountImpl.setDateAdded(getDateAdded());

		useraccountImpl.resetOriginalValues();

		return useraccountImpl;
	}

	public int compareTo(useraccount useraccount) {
		long primaryKey = useraccount.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		useraccount useraccount = null;

		try {
			useraccount = (useraccount)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = useraccount.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<useraccount> toCacheModel() {
		useraccountCacheModel useraccountCacheModel = new useraccountCacheModel();

		useraccountCacheModel.useraccountId = getUseraccountId();

		useraccountCacheModel.companyId = getCompanyId();

		useraccountCacheModel.firstName = getFirstName();

		String firstName = useraccountCacheModel.firstName;

		if ((firstName != null) && (firstName.length() == 0)) {
			useraccountCacheModel.firstName = null;
		}

		useraccountCacheModel.lastName = getLastName();

		String lastName = useraccountCacheModel.lastName;

		if ((lastName != null) && (lastName.length() == 0)) {
			useraccountCacheModel.lastName = null;
		}

		useraccountCacheModel.eMail = getEMail();

		String eMail = useraccountCacheModel.eMail;

		if ((eMail != null) && (eMail.length() == 0)) {
			useraccountCacheModel.eMail = null;
		}

		useraccountCacheModel.phoneNo = getPhoneNo();

		String phoneNo = useraccountCacheModel.phoneNo;

		if ((phoneNo != null) && (phoneNo.length() == 0)) {
			useraccountCacheModel.phoneNo = null;
		}

		useraccountCacheModel.major = getMajor();

		String major = useraccountCacheModel.major;

		if ((major != null) && (major.length() == 0)) {
			useraccountCacheModel.major = null;
		}

		useraccountCacheModel.cgpa = getCgpa();

		String cgpa = useraccountCacheModel.cgpa;

		if ((cgpa != null) && (cgpa.length() == 0)) {
			useraccountCacheModel.cgpa = null;
		}

		useraccountCacheModel.role = getRole();

		String role = useraccountCacheModel.role;

		if ((role != null) && (role.length() == 0)) {
			useraccountCacheModel.role = null;
		}

		useraccountCacheModel.password = getPassword();

		String password = useraccountCacheModel.password;

		if ((password != null) && (password.length() == 0)) {
			useraccountCacheModel.password = null;
		}

		useraccountCacheModel.asuriteId = getAsuriteId();

		String asuriteId = useraccountCacheModel.asuriteId;

		if ((asuriteId != null) && (asuriteId.length() == 0)) {
			useraccountCacheModel.asuriteId = null;
		}

		useraccountCacheModel.level = getLevel();

		String level = useraccountCacheModel.level;

		if ((level != null) && (level.length() == 0)) {
			useraccountCacheModel.level = null;
		}

		useraccountCacheModel.sex = getSex();

		String sex = useraccountCacheModel.sex;

		if ((sex != null) && (sex.length() == 0)) {
			useraccountCacheModel.sex = null;
		}

		Date dateAdded = getDateAdded();

		if (dateAdded != null) {
			useraccountCacheModel.dateAdded = dateAdded.getTime();
		}
		else {
			useraccountCacheModel.dateAdded = Long.MIN_VALUE;
		}

		return useraccountCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(29);

		sb.append("{useraccountId=");
		sb.append(getUseraccountId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", firstName=");
		sb.append(getFirstName());
		sb.append(", lastName=");
		sb.append(getLastName());
		sb.append(", eMail=");
		sb.append(getEMail());
		sb.append(", phoneNo=");
		sb.append(getPhoneNo());
		sb.append(", major=");
		sb.append(getMajor());
		sb.append(", cgpa=");
		sb.append(getCgpa());
		sb.append(", role=");
		sb.append(getRole());
		sb.append(", password=");
		sb.append(getPassword());
		sb.append(", asuriteId=");
		sb.append(getAsuriteId());
		sb.append(", level=");
		sb.append(getLevel());
		sb.append(", sex=");
		sb.append(getSex());
		sb.append(", dateAdded=");
		sb.append(getDateAdded());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(46);

		sb.append("<model><model-name>");
		sb.append("com.subscriberapprove.model.useraccount");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>useraccountId</column-name><column-value><![CDATA[");
		sb.append(getUseraccountId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>firstName</column-name><column-value><![CDATA[");
		sb.append(getFirstName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastName</column-name><column-value><![CDATA[");
		sb.append(getLastName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>eMail</column-name><column-value><![CDATA[");
		sb.append(getEMail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>phoneNo</column-name><column-value><![CDATA[");
		sb.append(getPhoneNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>major</column-name><column-value><![CDATA[");
		sb.append(getMajor());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cgpa</column-name><column-value><![CDATA[");
		sb.append(getCgpa());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>role</column-name><column-value><![CDATA[");
		sb.append(getRole());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>password</column-name><column-value><![CDATA[");
		sb.append(getPassword());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>asuriteId</column-name><column-value><![CDATA[");
		sb.append(getAsuriteId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>level</column-name><column-value><![CDATA[");
		sb.append(getLevel());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sex</column-name><column-value><![CDATA[");
		sb.append(getSex());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dateAdded</column-name><column-value><![CDATA[");
		sb.append(getDateAdded());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = useraccount.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			useraccount.class
		};
	private long _useraccountId;
	private long _companyId;
	private String _firstName;
	private String _lastName;
	private String _eMail;
	private String _phoneNo;
	private String _major;
	private String _cgpa;
	private String _role;
	private String _password;
	private String _asuriteId;
	private String _level;
	private String _sex;
	private Date _dateAdded;
	private useraccount _escapedModelProxy;
}