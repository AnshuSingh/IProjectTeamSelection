/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.asu.poly.teams.manualSelect.slayer.model.impl;

import com.asu.poly.teams.manualSelect.slayer.model.Team;
import com.asu.poly.teams.manualSelect.slayer.model.TeamModel;
import com.asu.poly.teams.manualSelect.slayer.model.TeamSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Team service. Represents a row in the &quot;TeamDetails&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.asu.poly.teams.manualSelect.slayer.model.TeamModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TeamImpl}.
 * </p>
 *
 * @author Eshwari
 * @see TeamImpl
 * @see com.asu.poly.teams.manualSelect.slayer.model.Team
 * @see com.asu.poly.teams.manualSelect.slayer.model.TeamModel
 * @generated
 */
@JSON(strict = true)
public class TeamModelImpl extends BaseModelImpl<Team> implements TeamModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a team model instance should use the {@link com.asu.poly.teams.manualSelect.slayer.model.Team} interface instead.
	 */
	public static final String TABLE_NAME = "TeamDetails";
	public static final Object[][] TABLE_COLUMNS = {
			{ "teamID", Types.BIGINT },
			{ "projectTitle", Types.VARCHAR },
			{ "faculty1", Types.VARCHAR },
			{ "faculty2", Types.VARCHAR },
			{ "faculty3", Types.VARCHAR },
			{ "faculty4", Types.VARCHAR },
			{ "student0", Types.VARCHAR },
			{ "student1", Types.VARCHAR },
			{ "student2", Types.VARCHAR },
			{ "student3", Types.VARCHAR },
			{ "student4", Types.VARCHAR },
			{ "student5", Types.VARCHAR },
			{ "student6", Types.VARCHAR },
			{ "student7", Types.VARCHAR },
			{ "student8", Types.VARCHAR },
			{ "student9", Types.VARCHAR },
			{ "dateAdded", Types.TIMESTAMP },
			{ "dateModified", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table TeamDetails (teamID LONG not null primary key,projectTitle VARCHAR(75) null,faculty1 VARCHAR(75) null,faculty2 VARCHAR(75) null,faculty3 VARCHAR(75) null,faculty4 VARCHAR(75) null,student0 VARCHAR(75) null,student1 VARCHAR(75) null,student2 VARCHAR(75) null,student3 VARCHAR(75) null,student4 VARCHAR(75) null,student5 VARCHAR(75) null,student6 VARCHAR(75) null,student7 VARCHAR(75) null,student8 VARCHAR(75) null,student9 VARCHAR(75) null,dateAdded DATE null,dateModified DATE null)";
	public static final String TABLE_SQL_DROP = "drop table TeamDetails";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.asu.poly.teams.manualSelect.slayer.model.Team"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.asu.poly.teams.manualSelect.slayer.model.Team"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Team toModel(TeamSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Team model = new TeamImpl();

		model.setTeamID(soapModel.getTeamID());
		model.setProjectTitle(soapModel.getProjectTitle());
		model.setFaculty1(soapModel.getFaculty1());
		model.setFaculty2(soapModel.getFaculty2());
		model.setFaculty3(soapModel.getFaculty3());
		model.setFaculty4(soapModel.getFaculty4());
		model.setStudent0(soapModel.getStudent0());
		model.setStudent1(soapModel.getStudent1());
		model.setStudent2(soapModel.getStudent2());
		model.setStudent3(soapModel.getStudent3());
		model.setStudent4(soapModel.getStudent4());
		model.setStudent5(soapModel.getStudent5());
		model.setStudent6(soapModel.getStudent6());
		model.setStudent7(soapModel.getStudent7());
		model.setStudent8(soapModel.getStudent8());
		model.setStudent9(soapModel.getStudent9());
		model.setDateAdded(soapModel.getDateAdded());
		model.setDateModified(soapModel.getDateModified());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Team> toModels(TeamSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Team> models = new ArrayList<Team>(soapModels.length);

		for (TeamSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.asu.poly.teams.manualSelect.slayer.model.Team"));

	public TeamModelImpl() {
	}

	public long getPrimaryKey() {
		return _teamID;
	}

	public void setPrimaryKey(long primaryKey) {
		setTeamID(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_teamID);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return Team.class;
	}

	public String getModelClassName() {
		return Team.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("teamID", getTeamID());
		attributes.put("projectTitle", getProjectTitle());
		attributes.put("faculty1", getFaculty1());
		attributes.put("faculty2", getFaculty2());
		attributes.put("faculty3", getFaculty3());
		attributes.put("faculty4", getFaculty4());
		attributes.put("student0", getStudent0());
		attributes.put("student1", getStudent1());
		attributes.put("student2", getStudent2());
		attributes.put("student3", getStudent3());
		attributes.put("student4", getStudent4());
		attributes.put("student5", getStudent5());
		attributes.put("student6", getStudent6());
		attributes.put("student7", getStudent7());
		attributes.put("student8", getStudent8());
		attributes.put("student9", getStudent9());
		attributes.put("dateAdded", getDateAdded());
		attributes.put("dateModified", getDateModified());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long teamID = (Long)attributes.get("teamID");

		if (teamID != null) {
			setTeamID(teamID);
		}

		String projectTitle = (String)attributes.get("projectTitle");

		if (projectTitle != null) {
			setProjectTitle(projectTitle);
		}

		String faculty1 = (String)attributes.get("faculty1");

		if (faculty1 != null) {
			setFaculty1(faculty1);
		}

		String faculty2 = (String)attributes.get("faculty2");

		if (faculty2 != null) {
			setFaculty2(faculty2);
		}

		String faculty3 = (String)attributes.get("faculty3");

		if (faculty3 != null) {
			setFaculty3(faculty3);
		}

		String faculty4 = (String)attributes.get("faculty4");

		if (faculty4 != null) {
			setFaculty4(faculty4);
		}

		String student0 = (String)attributes.get("student0");

		if (student0 != null) {
			setStudent0(student0);
		}

		String student1 = (String)attributes.get("student1");

		if (student1 != null) {
			setStudent1(student1);
		}

		String student2 = (String)attributes.get("student2");

		if (student2 != null) {
			setStudent2(student2);
		}

		String student3 = (String)attributes.get("student3");

		if (student3 != null) {
			setStudent3(student3);
		}

		String student4 = (String)attributes.get("student4");

		if (student4 != null) {
			setStudent4(student4);
		}

		String student5 = (String)attributes.get("student5");

		if (student5 != null) {
			setStudent5(student5);
		}

		String student6 = (String)attributes.get("student6");

		if (student6 != null) {
			setStudent6(student6);
		}

		String student7 = (String)attributes.get("student7");

		if (student7 != null) {
			setStudent7(student7);
		}

		String student8 = (String)attributes.get("student8");

		if (student8 != null) {
			setStudent8(student8);
		}

		String student9 = (String)attributes.get("student9");

		if (student9 != null) {
			setStudent9(student9);
		}

		Date dateAdded = (Date)attributes.get("dateAdded");

		if (dateAdded != null) {
			setDateAdded(dateAdded);
		}

		Date dateModified = (Date)attributes.get("dateModified");

		if (dateModified != null) {
			setDateModified(dateModified);
		}
	}

	@JSON
	public long getTeamID() {
		return _teamID;
	}

	public void setTeamID(long teamID) {
		_teamID = teamID;
	}

	@JSON
	public String getProjectTitle() {
		if (_projectTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _projectTitle;
		}
	}

	public void setProjectTitle(String projectTitle) {
		_projectTitle = projectTitle;
	}

	@JSON
	public String getFaculty1() {
		if (_faculty1 == null) {
			return StringPool.BLANK;
		}
		else {
			return _faculty1;
		}
	}

	public void setFaculty1(String faculty1) {
		_faculty1 = faculty1;
	}

	@JSON
	public String getFaculty2() {
		if (_faculty2 == null) {
			return StringPool.BLANK;
		}
		else {
			return _faculty2;
		}
	}

	public void setFaculty2(String faculty2) {
		_faculty2 = faculty2;
	}

	@JSON
	public String getFaculty3() {
		if (_faculty3 == null) {
			return StringPool.BLANK;
		}
		else {
			return _faculty3;
		}
	}

	public void setFaculty3(String faculty3) {
		_faculty3 = faculty3;
	}

	@JSON
	public String getFaculty4() {
		if (_faculty4 == null) {
			return StringPool.BLANK;
		}
		else {
			return _faculty4;
		}
	}

	public void setFaculty4(String faculty4) {
		_faculty4 = faculty4;
	}

	@JSON
	public String getStudent0() {
		if (_student0 == null) {
			return StringPool.BLANK;
		}
		else {
			return _student0;
		}
	}

	public void setStudent0(String student0) {
		_student0 = student0;
	}

	@JSON
	public String getStudent1() {
		if (_student1 == null) {
			return StringPool.BLANK;
		}
		else {
			return _student1;
		}
	}

	public void setStudent1(String student1) {
		_student1 = student1;
	}

	@JSON
	public String getStudent2() {
		if (_student2 == null) {
			return StringPool.BLANK;
		}
		else {
			return _student2;
		}
	}

	public void setStudent2(String student2) {
		_student2 = student2;
	}

	@JSON
	public String getStudent3() {
		if (_student3 == null) {
			return StringPool.BLANK;
		}
		else {
			return _student3;
		}
	}

	public void setStudent3(String student3) {
		_student3 = student3;
	}

	@JSON
	public String getStudent4() {
		if (_student4 == null) {
			return StringPool.BLANK;
		}
		else {
			return _student4;
		}
	}

	public void setStudent4(String student4) {
		_student4 = student4;
	}

	@JSON
	public String getStudent5() {
		if (_student5 == null) {
			return StringPool.BLANK;
		}
		else {
			return _student5;
		}
	}

	public void setStudent5(String student5) {
		_student5 = student5;
	}

	@JSON
	public String getStudent6() {
		if (_student6 == null) {
			return StringPool.BLANK;
		}
		else {
			return _student6;
		}
	}

	public void setStudent6(String student6) {
		_student6 = student6;
	}

	@JSON
	public String getStudent7() {
		if (_student7 == null) {
			return StringPool.BLANK;
		}
		else {
			return _student7;
		}
	}

	public void setStudent7(String student7) {
		_student7 = student7;
	}

	@JSON
	public String getStudent8() {
		if (_student8 == null) {
			return StringPool.BLANK;
		}
		else {
			return _student8;
		}
	}

	public void setStudent8(String student8) {
		_student8 = student8;
	}

	@JSON
	public String getStudent9() {
		if (_student9 == null) {
			return StringPool.BLANK;
		}
		else {
			return _student9;
		}
	}

	public void setStudent9(String student9) {
		_student9 = student9;
	}

	@JSON
	public Date getDateAdded() {
		return _dateAdded;
	}

	public void setDateAdded(Date dateAdded) {
		_dateAdded = dateAdded;
	}

	@JSON
	public Date getDateModified() {
		return _dateModified;
	}

	public void setDateModified(Date dateModified) {
		_dateModified = dateModified;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Team.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Team toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (Team)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		TeamImpl teamImpl = new TeamImpl();

		teamImpl.setTeamID(getTeamID());
		teamImpl.setProjectTitle(getProjectTitle());
		teamImpl.setFaculty1(getFaculty1());
		teamImpl.setFaculty2(getFaculty2());
		teamImpl.setFaculty3(getFaculty3());
		teamImpl.setFaculty4(getFaculty4());
		teamImpl.setStudent0(getStudent0());
		teamImpl.setStudent1(getStudent1());
		teamImpl.setStudent2(getStudent2());
		teamImpl.setStudent3(getStudent3());
		teamImpl.setStudent4(getStudent4());
		teamImpl.setStudent5(getStudent5());
		teamImpl.setStudent6(getStudent6());
		teamImpl.setStudent7(getStudent7());
		teamImpl.setStudent8(getStudent8());
		teamImpl.setStudent9(getStudent9());
		teamImpl.setDateAdded(getDateAdded());
		teamImpl.setDateModified(getDateModified());

		teamImpl.resetOriginalValues();

		return teamImpl;
	}

	public int compareTo(Team team) {
		long primaryKey = team.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		Team team = null;

		try {
			team = (Team)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = team.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Team> toCacheModel() {
		TeamCacheModel teamCacheModel = new TeamCacheModel();

		teamCacheModel.teamID = getTeamID();

		teamCacheModel.projectTitle = getProjectTitle();

		String projectTitle = teamCacheModel.projectTitle;

		if ((projectTitle != null) && (projectTitle.length() == 0)) {
			teamCacheModel.projectTitle = null;
		}

		teamCacheModel.faculty1 = getFaculty1();

		String faculty1 = teamCacheModel.faculty1;

		if ((faculty1 != null) && (faculty1.length() == 0)) {
			teamCacheModel.faculty1 = null;
		}

		teamCacheModel.faculty2 = getFaculty2();

		String faculty2 = teamCacheModel.faculty2;

		if ((faculty2 != null) && (faculty2.length() == 0)) {
			teamCacheModel.faculty2 = null;
		}

		teamCacheModel.faculty3 = getFaculty3();

		String faculty3 = teamCacheModel.faculty3;

		if ((faculty3 != null) && (faculty3.length() == 0)) {
			teamCacheModel.faculty3 = null;
		}

		teamCacheModel.faculty4 = getFaculty4();

		String faculty4 = teamCacheModel.faculty4;

		if ((faculty4 != null) && (faculty4.length() == 0)) {
			teamCacheModel.faculty4 = null;
		}

		teamCacheModel.student0 = getStudent0();

		String student0 = teamCacheModel.student0;

		if ((student0 != null) && (student0.length() == 0)) {
			teamCacheModel.student0 = null;
		}

		teamCacheModel.student1 = getStudent1();

		String student1 = teamCacheModel.student1;

		if ((student1 != null) && (student1.length() == 0)) {
			teamCacheModel.student1 = null;
		}

		teamCacheModel.student2 = getStudent2();

		String student2 = teamCacheModel.student2;

		if ((student2 != null) && (student2.length() == 0)) {
			teamCacheModel.student2 = null;
		}

		teamCacheModel.student3 = getStudent3();

		String student3 = teamCacheModel.student3;

		if ((student3 != null) && (student3.length() == 0)) {
			teamCacheModel.student3 = null;
		}

		teamCacheModel.student4 = getStudent4();

		String student4 = teamCacheModel.student4;

		if ((student4 != null) && (student4.length() == 0)) {
			teamCacheModel.student4 = null;
		}

		teamCacheModel.student5 = getStudent5();

		String student5 = teamCacheModel.student5;

		if ((student5 != null) && (student5.length() == 0)) {
			teamCacheModel.student5 = null;
		}

		teamCacheModel.student6 = getStudent6();

		String student6 = teamCacheModel.student6;

		if ((student6 != null) && (student6.length() == 0)) {
			teamCacheModel.student6 = null;
		}

		teamCacheModel.student7 = getStudent7();

		String student7 = teamCacheModel.student7;

		if ((student7 != null) && (student7.length() == 0)) {
			teamCacheModel.student7 = null;
		}

		teamCacheModel.student8 = getStudent8();

		String student8 = teamCacheModel.student8;

		if ((student8 != null) && (student8.length() == 0)) {
			teamCacheModel.student8 = null;
		}

		teamCacheModel.student9 = getStudent9();

		String student9 = teamCacheModel.student9;

		if ((student9 != null) && (student9.length() == 0)) {
			teamCacheModel.student9 = null;
		}

		Date dateAdded = getDateAdded();

		if (dateAdded != null) {
			teamCacheModel.dateAdded = dateAdded.getTime();
		}
		else {
			teamCacheModel.dateAdded = Long.MIN_VALUE;
		}

		Date dateModified = getDateModified();

		if (dateModified != null) {
			teamCacheModel.dateModified = dateModified.getTime();
		}
		else {
			teamCacheModel.dateModified = Long.MIN_VALUE;
		}

		return teamCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(37);

		sb.append("{teamID=");
		sb.append(getTeamID());
		sb.append(", projectTitle=");
		sb.append(getProjectTitle());
		sb.append(", faculty1=");
		sb.append(getFaculty1());
		sb.append(", faculty2=");
		sb.append(getFaculty2());
		sb.append(", faculty3=");
		sb.append(getFaculty3());
		sb.append(", faculty4=");
		sb.append(getFaculty4());
		sb.append(", student0=");
		sb.append(getStudent0());
		sb.append(", student1=");
		sb.append(getStudent1());
		sb.append(", student2=");
		sb.append(getStudent2());
		sb.append(", student3=");
		sb.append(getStudent3());
		sb.append(", student4=");
		sb.append(getStudent4());
		sb.append(", student5=");
		sb.append(getStudent5());
		sb.append(", student6=");
		sb.append(getStudent6());
		sb.append(", student7=");
		sb.append(getStudent7());
		sb.append(", student8=");
		sb.append(getStudent8());
		sb.append(", student9=");
		sb.append(getStudent9());
		sb.append(", dateAdded=");
		sb.append(getDateAdded());
		sb.append(", dateModified=");
		sb.append(getDateModified());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(58);

		sb.append("<model><model-name>");
		sb.append("com.asu.poly.teams.manualSelect.slayer.model.Team");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>teamID</column-name><column-value><![CDATA[");
		sb.append(getTeamID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projectTitle</column-name><column-value><![CDATA[");
		sb.append(getProjectTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>faculty1</column-name><column-value><![CDATA[");
		sb.append(getFaculty1());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>faculty2</column-name><column-value><![CDATA[");
		sb.append(getFaculty2());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>faculty3</column-name><column-value><![CDATA[");
		sb.append(getFaculty3());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>faculty4</column-name><column-value><![CDATA[");
		sb.append(getFaculty4());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>student0</column-name><column-value><![CDATA[");
		sb.append(getStudent0());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>student1</column-name><column-value><![CDATA[");
		sb.append(getStudent1());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>student2</column-name><column-value><![CDATA[");
		sb.append(getStudent2());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>student3</column-name><column-value><![CDATA[");
		sb.append(getStudent3());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>student4</column-name><column-value><![CDATA[");
		sb.append(getStudent4());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>student5</column-name><column-value><![CDATA[");
		sb.append(getStudent5());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>student6</column-name><column-value><![CDATA[");
		sb.append(getStudent6());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>student7</column-name><column-value><![CDATA[");
		sb.append(getStudent7());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>student8</column-name><column-value><![CDATA[");
		sb.append(getStudent8());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>student9</column-name><column-value><![CDATA[");
		sb.append(getStudent9());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dateAdded</column-name><column-value><![CDATA[");
		sb.append(getDateAdded());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dateModified</column-name><column-value><![CDATA[");
		sb.append(getDateModified());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Team.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			Team.class
		};
	private long _teamID;
	private String _projectTitle;
	private String _faculty1;
	private String _faculty2;
	private String _faculty3;
	private String _faculty4;
	private String _student0;
	private String _student1;
	private String _student2;
	private String _student3;
	private String _student4;
	private String _student5;
	private String _student6;
	private String _student7;
	private String _student8;
	private String _student9;
	private Date _dateAdded;
	private Date _dateModified;
	private Team _escapedModelProxy;
}