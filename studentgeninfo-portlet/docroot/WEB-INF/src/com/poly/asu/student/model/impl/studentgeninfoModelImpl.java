/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.poly.asu.student.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.poly.asu.student.model.studentgeninfo;
import com.poly.asu.student.model.studentgeninfoModel;
import com.poly.asu.student.model.studentgeninfoSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the studentgeninfo service. Represents a row in the &quot;Studentgeninfo_studentgeninfo&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.poly.asu.student.model.studentgeninfoModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link studentgeninfoImpl}.
 * </p>
 *
 * @author Shruthi
 * @see studentgeninfoImpl
 * @see com.poly.asu.student.model.studentgeninfo
 * @see com.poly.asu.student.model.studentgeninfoModel
 * @generated
 */
@JSON(strict = true)
public class studentgeninfoModelImpl extends BaseModelImpl<studentgeninfo>
	implements studentgeninfoModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a studentgeninfo model instance should use the {@link com.poly.asu.student.model.studentgeninfo} interface instead.
	 */
	public static final String TABLE_NAME = "Studentgeninfo_studentgeninfo";
	public static final Object[][] TABLE_COLUMNS = {
			{ "studentgeninfoid", Types.BIGINT },
			{ "name", Types.VARCHAR },
			{ "asuid", Types.BIGINT },
			{ "department", Types.VARCHAR },
			{ "level", Types.BIGINT },
			{ "cummulativegpa", Types.FLOAT },
			{ "loggedinuserId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table Studentgeninfo_studentgeninfo (studentgeninfoid LONG not null primary key,name VARCHAR(75) null,asuid LONG,department VARCHAR(75) null,level LONG,cummulativegpa DOUBLE,loggedinuserId LONG,createDate DATE null,modifiedDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table Studentgeninfo_studentgeninfo";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.poly.asu.student.model.studentgeninfo"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.poly.asu.student.model.studentgeninfo"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static studentgeninfo toModel(studentgeninfoSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		studentgeninfo model = new studentgeninfoImpl();

		model.setStudentgeninfoid(soapModel.getStudentgeninfoid());
		model.setName(soapModel.getName());
		model.setAsuid(soapModel.getAsuid());
		model.setDepartment(soapModel.getDepartment());
		model.setLevel(soapModel.getLevel());
		model.setCummulativegpa(soapModel.getCummulativegpa());
		model.setLoggedinuserId(soapModel.getLoggedinuserId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<studentgeninfo> toModels(studentgeninfoSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<studentgeninfo> models = new ArrayList<studentgeninfo>(soapModels.length);

		for (studentgeninfoSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.poly.asu.student.model.studentgeninfo"));

	public studentgeninfoModelImpl() {
	}

	public long getPrimaryKey() {
		return _studentgeninfoid;
	}

	public void setPrimaryKey(long primaryKey) {
		setStudentgeninfoid(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_studentgeninfoid);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return studentgeninfo.class;
	}

	public String getModelClassName() {
		return studentgeninfo.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("studentgeninfoid", getStudentgeninfoid());
		attributes.put("name", getName());
		attributes.put("asuid", getAsuid());
		attributes.put("department", getDepartment());
		attributes.put("level", getLevel());
		attributes.put("cummulativegpa", getCummulativegpa());
		attributes.put("loggedinuserId", getLoggedinuserId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long studentgeninfoid = (Long)attributes.get("studentgeninfoid");

		if (studentgeninfoid != null) {
			setStudentgeninfoid(studentgeninfoid);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		Long asuid = (Long)attributes.get("asuid");

		if (asuid != null) {
			setAsuid(asuid);
		}

		String department = (String)attributes.get("department");

		if (department != null) {
			setDepartment(department);
		}

		Long level = (Long)attributes.get("level");

		if (level != null) {
			setLevel(level);
		}

		Float cummulativegpa = (Float)attributes.get("cummulativegpa");

		if (cummulativegpa != null) {
			setCummulativegpa(cummulativegpa);
		}

		Long loggedinuserId = (Long)attributes.get("loggedinuserId");

		if (loggedinuserId != null) {
			setLoggedinuserId(loggedinuserId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}
	}

	@JSON
	public long getStudentgeninfoid() {
		return _studentgeninfoid;
	}

	public void setStudentgeninfoid(long studentgeninfoid) {
		_studentgeninfoid = studentgeninfoid;
	}

	@JSON
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	public void setName(String name) {
		_name = name;
	}

	@JSON
	public long getAsuid() {
		return _asuid;
	}

	public void setAsuid(long asuid) {
		_asuid = asuid;
	}

	@JSON
	public String getDepartment() {
		if (_department == null) {
			return StringPool.BLANK;
		}
		else {
			return _department;
		}
	}

	public void setDepartment(String department) {
		_department = department;
	}

	@JSON
	public long getLevel() {
		return _level;
	}

	public void setLevel(long level) {
		_level = level;
	}

	@JSON
	public float getCummulativegpa() {
		return _cummulativegpa;
	}

	public void setCummulativegpa(float cummulativegpa) {
		_cummulativegpa = cummulativegpa;
	}

	@JSON
	public long getLoggedinuserId() {
		return _loggedinuserId;
	}

	public void setLoggedinuserId(long loggedinuserId) {
		_loggedinuserId = loggedinuserId;
	}

	@JSON
	public Date getCreateDate() {
		return _createDate;
	}

	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			studentgeninfo.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public studentgeninfo toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (studentgeninfo)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		studentgeninfoImpl studentgeninfoImpl = new studentgeninfoImpl();

		studentgeninfoImpl.setStudentgeninfoid(getStudentgeninfoid());
		studentgeninfoImpl.setName(getName());
		studentgeninfoImpl.setAsuid(getAsuid());
		studentgeninfoImpl.setDepartment(getDepartment());
		studentgeninfoImpl.setLevel(getLevel());
		studentgeninfoImpl.setCummulativegpa(getCummulativegpa());
		studentgeninfoImpl.setLoggedinuserId(getLoggedinuserId());
		studentgeninfoImpl.setCreateDate(getCreateDate());
		studentgeninfoImpl.setModifiedDate(getModifiedDate());

		studentgeninfoImpl.resetOriginalValues();

		return studentgeninfoImpl;
	}

	public int compareTo(studentgeninfo studentgeninfo) {
		long primaryKey = studentgeninfo.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		studentgeninfo studentgeninfo = null;

		try {
			studentgeninfo = (studentgeninfo)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = studentgeninfo.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<studentgeninfo> toCacheModel() {
		studentgeninfoCacheModel studentgeninfoCacheModel = new studentgeninfoCacheModel();

		studentgeninfoCacheModel.studentgeninfoid = getStudentgeninfoid();

		studentgeninfoCacheModel.name = getName();

		String name = studentgeninfoCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			studentgeninfoCacheModel.name = null;
		}

		studentgeninfoCacheModel.asuid = getAsuid();

		studentgeninfoCacheModel.department = getDepartment();

		String department = studentgeninfoCacheModel.department;

		if ((department != null) && (department.length() == 0)) {
			studentgeninfoCacheModel.department = null;
		}

		studentgeninfoCacheModel.level = getLevel();

		studentgeninfoCacheModel.cummulativegpa = getCummulativegpa();

		studentgeninfoCacheModel.loggedinuserId = getLoggedinuserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			studentgeninfoCacheModel.createDate = createDate.getTime();
		}
		else {
			studentgeninfoCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			studentgeninfoCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			studentgeninfoCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return studentgeninfoCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(19);

		sb.append("{studentgeninfoid=");
		sb.append(getStudentgeninfoid());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", asuid=");
		sb.append(getAsuid());
		sb.append(", department=");
		sb.append(getDepartment());
		sb.append(", level=");
		sb.append(getLevel());
		sb.append(", cummulativegpa=");
		sb.append(getCummulativegpa());
		sb.append(", loggedinuserId=");
		sb.append(getLoggedinuserId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(31);

		sb.append("<model><model-name>");
		sb.append("com.poly.asu.student.model.studentgeninfo");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>studentgeninfoid</column-name><column-value><![CDATA[");
		sb.append(getStudentgeninfoid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>asuid</column-name><column-value><![CDATA[");
		sb.append(getAsuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>department</column-name><column-value><![CDATA[");
		sb.append(getDepartment());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>level</column-name><column-value><![CDATA[");
		sb.append(getLevel());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cummulativegpa</column-name><column-value><![CDATA[");
		sb.append(getCummulativegpa());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>loggedinuserId</column-name><column-value><![CDATA[");
		sb.append(getLoggedinuserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = studentgeninfo.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			studentgeninfo.class
		};
	private long _studentgeninfoid;
	private String _name;
	private long _asuid;
	private String _department;
	private long _level;
	private float _cummulativegpa;
	private long _loggedinuserId;
	private Date _createDate;
	private Date _modifiedDate;
	private studentgeninfo _escapedModelProxy;
}